// Assumes polyglot.jar is in classpath
// include "polyglot/parse/java12.cup"
// TODO: change to java7 support
include "polyglot/ext/jl7/parse/jl7.ppg"

package edu.buffalo.cse.blue.maybe.parse;

import edu.buffalo.cse.blue.maybe.types.MaybeTypeSystem;
import edu.buffalo.cse.blue.maybe.ast.*;
import polyglot.ast.Assign.Operator;
import polyglot.parse.Name;
import polyglot.parse.VarDeclarator;
import polyglot.ext.jl7.parse.*;
import polyglot.ext.jl7.ast.*;
import polyglot.ext.jl7.types.*;

parser Grm extends polyglot.ext.jl7.parse.Grm  {:
    public final MaybeTypeSystem ts;
    public final MaybeNodeFactory nf;

    public Grm(Lexer l, TypeSystem t, NodeFactory n, ErrorQueue q) {
        super(l, t, n, q);
        ts = (MaybeTypeSystem) t;
        nf = (MaybeNodeFactory) n;
    }

    public Maybe Maybe(Position pos, Expr cond, List<Block> alternatives) throws Exception {
        return nf.Maybe(pos, cond, alternatives);
    }

    public MaybeAssign MaybeAssign(Position pos, Expr left, Operator op, Expr maybeLabel, List<Expr> right) throws Exception {
        return nf.MaybeAssign(pos, left, op, maybeLabel, right);
    }

    public MaybeAssign MaybeLocalAssign(Position pos, Local left, Operator op, Expr maybeLabel, List<Expr> right) throws Exception {
        return nf.MaybeLocalAssign(pos, left, op, maybeLabel, right);
    }

    public MaybeAssign MaybeFieldAssign(Position pos, Field left, Operator op, Expr maybeLabel, List<Expr> right) throws Exception {
        return nf.MaybeFieldAssign(pos, left, op, maybeLabel, right);
    }

    public MaybeAssign MaybeArrayAccessAssign(Position pos, ArrayAccess left, Operator op, Expr maybeLabel, List<Expr> right) throws Exception {
        return nf.MaybeArrayAccessAssign(pos, left, op, maybeLabel, right);
    }

    public MaybeAssign MaybeAmbAssign(Position pos, Local left, Operator op, Expr maybeLabel, List<Expr> right) throws Exception {
        return nf.MaybeAmbAssign(pos, left, op, maybeLabel, right);
    }

    public List<LocalDecl> variableDeclarators(TypeNode a, List<VarDeclarator> b, Flags flags, List<AnnotationElem> annotations) throws Exception {
        List<LocalDecl> l = new LinkedList<>();
        for (VarDeclarator d : b) {
            if (d instanceof MaybeVarDeclarator) {
                MaybeVarDeclarator m = (MaybeVarDeclarator) d;
                l.add(nf.MaybeLocalDecl(pos(m), flags, array(a, m.dims), m.name, m.label, m.alternatives));
            } else {
                l.add(nf.LocalDecl(pos(d), flags, annotations, array(a, d.dims), d.name, d.init));
            }
        }
        return l;
    }

    public List<LocalDecl> variableDeclarators(TypeNode a, List<VarDeclarator> b, Flags flags) throws Exception {
        List<LocalDecl> l = new LinkedList<>();
        for (VarDeclarator d : b) {
            if (d instanceof MaybeVarDeclarator) {
                MaybeVarDeclarator m = (MaybeVarDeclarator) d;
                l.add(nf.MaybeLocalDecl(pos(m), flags, array(a, m.dims), m.name, m.label, m.alternatives));
            } else {
                l.add(nf.LocalDecl(pos(d), flags, array(a, d.dims), d.name, d.init));
            }
        }
        return l;
    }

    public MaybeLocalDecl MaybeLocalDecl(Position pos, Flags flags, TypeNode type, Id name, Expr label, List<Expr> alternatives) {
        return nf.MaybeLocalDecl(pos, flags, type, name, label, alternatives);
    }
:};

terminal Token MAYBE, MAYBEOR;
non terminal Maybe maybe_statement;
non terminal List<Block> maybe_clauses;
non terminal List<Expr> maybe_variable_initializer;
// non terminal Expr maybe_variable;
// non terminal List<Block> maybe_clauses, maybe_opt;

start with goal;

// TODO: modify the default Java grammar using PPG operations

// extend statement ::=
//    maybe_statement:a {:  RESULT = a;  :};
//
// extend statement_no_short_if ::=
//    maybe_statement_no_short_if:a {:  RESULT = a;  :};

extend statement_without_trailing_substatement ::=
    maybe_statement:a
        {: RESULT = a; :}
;

maybe_statement ::=
// extend if_then_else_statement ::=
    // MAYBE:n LPAREN expression:a RPAREN statement_no_short_if:b maybe_clauses:c
    MAYBE:n LPAREN expression:a RPAREN maybe_clauses:b
    {:
        RESULT = parser.nf.Maybe(parser.pos(n, b), a, b);
    :}
;

extend variable_declarator ::=
        variable_declarator_id:a EQ MAYBE:n LPAREN expression:b RPAREN LBRACE maybe_variable_initializer:c RBRACE
        {:
            MaybeVarDeclarator maybeVarDeclarator = new MaybeVarDeclarator(a);
            RESULT = maybeVarDeclarator;
            maybeVarDeclarator.label = b;
            maybeVarDeclarator.alternatives = c;
        :}
;

extend assignment ::=
        // Expr
        left_hand_side:a assignment_operator:b MAYBE LPAREN expression:c RPAREN LBRACE maybe_variable_initializer:d RBRACE:n
        // left_hand_side:a EQ:b MAYBE:n LPAREN expression:c RPAREN maybe_variable_initializer:d
        {:
            RESULT = parser.nf.MaybeAssign(parser.pos(a, n), a, b, c, d);
        :}
    ;

// TODO: add MaybeFiledDecl to handle field maybe variable
override field_declaration ::=
    modifiers_or_annotations_opt:a type:b variable_declarators:c SEMICOLON:e
    {: List<ClassMember> l = new LinkedList<>();
       for (VarDeclarator d : c) {
         l.add(parser.nf.FieldDecl(parser.pos(b, e),
               a.flags(), a.annotations(), parser.array(b, d.dims),
               d.name, d.init, parser.javadoc(a.position(), parser.pos(b))));
        }
        RESULT = l; :}
    ;

override local_variable_declaration ::=
                    // List<LocalDecl>
    modifiers_or_annotations:a type:b variable_declarators:c
            {:
                RESULT = parser.variableDeclarators(b, c, a.flags(), a.annotations()); :}
    |
    type:a variable_declarators:b//**
            {:
                RESULT = parser.variableDeclarators(a, b, Flags.NONE); :}
	;
// maybe_variable ::=
//     MAYBE:n LPAREN expression:b RPAREN LBRACE maybe_variable_initializer:c RBRACE
//     {:
//         RESULT = parser.nf.MaybeVariable(parser.pos(n, c), b, c);
//     :}
// ;

// variable_declarators ::=
//                     // List of VarDeclarator
//         variable_declarator:a
//             {: List<VarDeclarator> l = new LinkedList<>();
//                l.add(a);
//                RESULT = l; :}
//     |   variable_declarators:a COMMA variable_declarator:b
//             {: RESULT = a;
//                a.add(b); :}
//     ;

// TODO: change VarDeclarator support a.maybeInit = b
// TODO: maybe we need extends VarDeclarator
// non terminal VarDeclarator variable_declarator_id;
// variable_declarator ::=
//                 // VarDeclarator
//         variable_declarator_id:a
//             {: RESULT = a; :}
//     |   variable_declarator_id:a EQ variable_initializer:b
//             {: RESULT = a;
//                a.init = b; :}
// TODO: or we need extend variable_initializer that can handle maybe?
// extend variable_declarator ::=
//         variable_declarator_id:a EQ maybe_variable:b
//             {: RESULT = a;
//                a.init = b; :}
// ;

maybe_variable_initializer ::=
    variable_initializer:a
    {:
        List<Expr> l = new LinkedList<>();
        l.add(a);
        RESULT = l;
    :}
    |
    maybe_variable_initializer:a COMMA variable_initializer:b
    {:
        RESULT = a;
        a.add(b);
    :}
;

// variable_initializer ::=
//                     // Expr
//         expression:a
//             {: RESULT = a; :}
//     |   array_initializer:a
//             {: RESULT = a; :}
//     ;

// variable_initializers ::=
//                     // List of Expr
//         variable_initializer:a
//             {: List<Expr> l = new LinkedList<>();
//            l.add(a);
//            RESULT = l; :}
//     |   variable_initializers:a COMMA variable_initializer:b
//             {: RESULT = a; a.add(b); :}
//     ;

// variable_declarator ::=
//                 // VarDeclarator
//         variable_declarator_id:a
//             {: RESULT = a; :}
//     |   variable_declarator_id:a EQ variable_initializer:b
//             {: RESULT = a;
//                a.init = b; :}
//     ;

// extend statement ::=
//     maybe_clauses:a
//         {: RESULT = a; :}
// ;


// maybe_statement ::=
//     MAYBE:n LPAREN expression:a RPAREN block:b maybe_clauses:c
//             {: RESULT = parser.nf.Maybe(parser.pos(n, c), a, b, c); :}
//     ;

// maybe_opt ::=
//     block:a
//             {: RESULT = new LinkedList<>(); :}
//     |   maybe_clauses:a
//             {: RESULT = a; :}
//     ;

maybe_clauses ::=
    // List of maybe catch
    block:a
        {: List<Block> l = new LinkedList<>();
            l.add(a);
            RESULT = l; :}
    |   maybe_clauses:a MAYBEOR block:b
        {: RESULT = a;
           a.add(b); :}
    ;
